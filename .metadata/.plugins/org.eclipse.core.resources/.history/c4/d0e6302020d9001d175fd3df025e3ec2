package com.spring.mongo.service;

import java.util.List;

import org.bson.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.BasicUpdate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.data.repository.support.PageableExecutionUtils;
import org.springframework.stereotype.Service;

@Service("bookService2")
public class BookService2 {

	@Autowired
	private MongoTemplate mongoTemplate;
	
	public List<Document> getAllBooks(){
		return mongoTemplate.findAll(Document.class,"books");
	}
	
	public Document insertBook(Document doc) {
		return mongoTemplate.insert(doc,"books");
	}
	
	public String updateBook(Document doc,String id) {
		Query query = new Query(Criteria.where("_id").is(id));
		Update update = new BasicUpdate(doc);
		return "Updated Count"+mongoTemplate.updateFirst(query, update,"books").getModifiedCount();
	}
	
	public long deleteBook(String id) {
		Query query = new Query(Criteria.where("_id").is(id));
		return mongoTemplate.remove(query,"books").getDeletedCount();
	}
	
	
	public List<Object> getBooksWithPageable(int pageNo,int pageSize,String[] fields,String sortBy){
		Query query = new Query();
		for(String field:fields) {
			query.fields().include(field);
		}
		Sort sort = Sort.by(sortBy);
		Pageable pageable = PageRequest.of(pageNo, pageSize, sort);
		query.with(pageable);
		List<Document> doc=mongoTemplate.find(query,Document.class,"books");
		Page<Document> pageable=PageableExecutionUtils.getPage(doc, pageable,()-> mongoTemplate.count(query,Document.class));
		return null;
	}
}
